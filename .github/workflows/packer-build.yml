name: packer-build

on:
    pull_request:
      branches: [main]
      types: [closed]
  

jobs:
    build:
        name: Packer Build
        runs-on: ubuntu-latest
        steps:
            - name: Checkout
              uses: actions/checkout@v3
            
            - name: Install Java 17
              uses: actions/setup-java@v3
              with:
                java-version: 17
                distribution: temurin
            # Install MySQL
            - name: Setup MySQL
              run: sudo systemctl start mysql.service
            # Start spring boot and run integration tests
            - name: Adding logging file
              run: |
                sudo mkdir --parents /var/log/csye6225
                sudo touch /var/log/csye6225/errors.log
                sudo touch /var/log/csye6225/info.log
                sudo touch /var/log/csye6225/warn.log
                sudo touch /var/log/csye6225/debug.log
  
            - name: Giving write permissions
              run: |
                sudo chmod ugo+wx /var/log/csye6225/errors.log
                sudo chmod ugo+wx /var/log/csye6225/info.log
                sudo chmod ugo+wx /var/log/csye6225/debug.log
                sudo chmod ugo+wx /var/log/csye6225/warn.log
            

            - name: Run integration tests
              run: | 
                mvn spring-boot:run -Dspring.datasource.url=jdbc:mysql://localhost:3306/clouddb?createDatabaseIfNotExist=true -Dspring.datasource.username=${{secrets.DB_USER_NAME}} -Dspring.datasource.password=${{secrets.DB_PASSWORD}} -Dspring.datasource.driver-class-name=com.mysql.cj.jdbc.Driver -Dspring.jpa.hibernate.ddl-auto=update -Dspring.datasource.hikari.connection-timeout=20000 &
                sleep 60
                mvn test
            # Build Spring boot project and remove old artifacts
            - name: Build project
              run: mvn clean package -DskipTests
            # Provide Gcloud service user creds
            - id: auth
              uses: google-github-actions/auth@v2
              with:
                credentials_json: ${{ secrets.GCLOUD_SERVICE_USER_JSON }}
            # Setup Gcloud
            - name: Set up Cloud SDK
              uses: google-github-actions/setup-gcloud@v2
            # Check if Gcloud installed successfully
            - name: Use gcloud CLI
              run: gcloud info
            # Setup Packer
            - name: Setup Packer
              uses: hashicorp/setup-packer@main
            # Initialise Packer
            - name: Packer init
              run: packer init ./build-mi.pkr.hcl
            # Format packer files
            - name: Packer format
              run: packer fmt -check ./build-mi.pkr.hcl
            # Validate Packer Files
            - name: Packer validate
              run: packer validate ./build-mi.pkr.hcl

    refresh-instance:
      runs-on: ubuntu-latest
      name:  Refresh Instance to Use Latest MI
      steps:
        - name: Checkout
          uses: actions/checkout@v3
            
        - name: Install Java 17
          uses: actions/setup-java@v3
          with:
            java-version: 17
            distribution: temurin

        - name: Adding logging file
          run: |
              sudo mkdir --parents /var/log/csye6225
              sudo touch /var/log/csye6225/errors.log
              sudo touch /var/log/csye6225/info.log
              sudo touch /var/log/csye6225/warn.log
              sudo touch /var/log/csye6225/debug.log

        - name: Giving write permissions
          run: |
              sudo chmod ugo+wx /var/log/csye6225/errors.log
              sudo chmod ugo+wx /var/log/csye6225/info.log
              sudo chmod ugo+wx /var/log/csye6225/debug.log
              sudo chmod ugo+wx /var/log/csye6225/warn.log

        # Build Spring boot project and remove old artifacts
        - name: Build project
          run: mvn clean package -DskipTests

        - name: Setup Gcloud CLI
          uses: google-github-actions/auth@v2
          with:
            credentials_json: ${{ secrets.GCLOUD_SERVICE_USER_JSON }}
          # Setup Gcloud
        - name: Set up Cloud SDK
          uses: google-github-actions/setup-gcloud@v2
          # Check if Gcloud installed successfully
        - name: Use gcloud CLI
          run: gcloud info

        # Setup Packer
        - name: Setup Packer
          uses: hashicorp/setup-packer@main
        # Initialise Packer
        - name: Packer init
          run: packer init ./build-mi.pkr.hcl
        # Build image with packer
        - name: Packer build
          run: |
            packer build build-mi.pkr.hcl
            image_id=$(gcloud compute images list --filter="family=csye6225-app-image" --format="value(NAME)" --sort-by=~creationTimestamp --limit=1)
            echo "IMAGE_ID=$image_id" >> $GITHUB_ENV
            echo "Image ID: $image_id"
        # Printing all the environment variables
        - name: Print ENV variables
          run: |
            RANDOM_ID=$(uuidgen | tr -d '-' | cut -c1-6)
            echo "Generated random ID: $RANDOM_ID"
            echo "RANDOM_ID=${RANDOM_ID}" >> $GITHUB_ENV
            echo "RANDOM_ID: $RANDOM_ID"
            echo "IMAGE_ID: $IMAGE_ID"
        # Creating new image template using the latest version of MI
        - name:  Create Image Template from Latest Image
          run:  |
            gcloud compute instance-templates create ${{ vars.INSATNCE_TEMPLATE }}-${{ env.RANDOM_ID}} \
            --instance-template-region=${{ vars.REGION }} \
            --image=${{ env.IMAGE_ID }} \
            --region=${{vars.REGION}} \
            --machine-type=e2-medium \
            --network=vpc-def \
            --subnet=vpc-def-webapp \
            --scopes='https://www.googleapis.com/auth/cloud-platform' \
            --metadata=startup-script='#!/bin/bash

                                        if [ ! -f "/opt/db.properties" ] 
                                        then
                                        sudo touch /opt/db.properties
                                        
                                        sudo echo "spring.datasource.url=jdbc:mysql://${google_sql_database_instance.database_instance.first_ip_address}:3306/${google_sql_database.database.name}?createDatabaseIfNotExist=true" >> /opt/db.properties
                                        sudo echo "spring.datasource.username=${google_sql_user.users.name}" >> /opt/db.properties
                                        sudo echo "spring.datasource.password=${google_sql_user.users.password}" >> /opt/db.properties
                                        sudo echo "spring.datasource.driver-class-name=com.mysql.cj.jdbc.Driver" >> /opt/db.properties
                                        sudo echo "spring.jpa.hibernate.ddl-auto=update" >> /opt/db.properties
                                        sudo echo "spring.jpa.show-sql=true" >> /opt/db.properties
                                        sudo echo "spring.jpa.properties.hibernate.dialect=org.hibernate.dialect.MySQL8Dialect" >> /opt/db.properties
                                        
                                        sudo chown -R csye6225:csye6225 /opt/db.properties
                                        else
                                        sudo echo "db.properties already exists" >> /var/log/csye6225/app.log
                                        fi
                                        sudo touch /opt/pubsub-service-account-key.json'
                                                                    

        - name: Refresh instances
          run: |
            gcloud compute instance-groups managed rolling-action replace ${{ vars.GROUP_MANAGER}} \
            --region=${{ vars.REGION }} \
            --version=template=projects/csye6225-dev-414923/regions/us-east1/instanceTemplates/${{ vars.INSATNCE_TEMPLATE }}-${{ env.RANDOM_ID }} \
            

        - name: Check Status
          run: |
                status=$(gcloud compute instance-groups managed wait-until webapp-igm --region=us-east4 --stable)
                echo "Status: $status"
                if [[ $status == "Group is stable" ]]; then
                  echo "Refreshed successfully"
                  break
                else
                  echo "Refresh Failed"
                  exit 1
                fi
                if [ "$status" == "UPDATING" ]; then
                  echo "IGM is still updating..."
                  exit 1
                fi
                if [ "$status" == "READY" ]; then
                  echo "IGM is ready!"
                  exit 0
                fi
                exit 1
            
